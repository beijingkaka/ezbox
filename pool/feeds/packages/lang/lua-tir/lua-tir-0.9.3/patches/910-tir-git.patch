diff -urNd tir-0.9.3-3/tir/mongrel2/connection.lua Tir.git/tir/mongrel2/connection.lua
--- tir-0.9.3-3/tir/mongrel2/connection.lua	2011-07-08 14:37:40.000000000 +0800
+++ Tir.git/tir/mongrel2/connection.lua	2012-07-13 12:00:22.557981263 +0800
@@ -49,7 +49,13 @@
     
     local raw = {}
     for k, v in pairs(headers) do
-        insert(raw, format('%s: %s', k, v))
+    	if( "table" == type(v) ) then
+    		for l, w in pairs(v) do
+    			insert(raw, format('%s: %s', k, w))
+    		end
+    	else
+        	insert(raw, format('%s: %s', k, v))
+        end
     end
     
     return format(HTTP_FORMAT, code, status, concat(raw, '\r\n'), body)
diff -urNd tir-0.9.3-3/tir/session.lua Tir.git/tir/session.lua
--- tir-0.9.3-3/tir/session.lua	2011-07-08 14:37:40.000000000 +0800
+++ Tir.git/tir/session.lua	2012-07-13 12:00:22.557981263 +0800
@@ -36,18 +36,25 @@
 function make_expires()
     local temp = os.date("*t", os.time())
     temp.year = temp.year + BIG_EXPIRE_TIME
-    return os.date("%a, %d-%b-%Y %X GMT", os.time(temp))
+    return os.time(temp)
 end
 
 function make_session_cookie(ident)
-    return 'session="' .. (ident or make_session_id()) ..
-            '"; version=1; path=/; expires=' .. make_expires()
+    local cookie = {}
+    cookie.key = 'session'
+    cookie.value = ident or make_session_id()
+    cookie.version = 1
+    cookie.path = '/'
+    cookie.expires = make_expires()
+    return cookie
 end
 
 function parse_session_id(cookie)
     if not cookie then return nil end
 
-    return cookie:match('session="(APP-[a-z0-9\-]+)";?')
+    local cookie = parse_http_cookie(cookie)
+    
+    return cookie.session[1]
 end
 
 
@@ -66,13 +73,11 @@
 
 function http_cookie_ident(req)
     local ident = parse_session_id(req.headers['cookie'])
-
     if not ident then
         ident = make_session_id()
         local cookie = make_session_cookie(ident)
 
-        req.headers['set-cookie'] = cookie
-        req.headers['cookie'] = cookie
+        set_http_cookie(req, cookie)
         req.session_id = ident
     end
 
diff -urNd tir-0.9.3-3/tir/util.lua Tir.git/tir/util.lua
--- tir-0.9.3-3/tir/util.lua	2011-07-08 14:37:40.000000000 +0800
+++ Tir.git/tir/util.lua	2012-07-13 12:00:22.557981263 +0800
@@ -144,3 +144,61 @@
 end
 
 
+-- Parses a cookie string into a table
+-- A given key will always be associated with a table containing 
+-- one or more assigned values.
+-- Note:  A cookie string may contain multiple cookies with the same key,
+-- (which can happen if similar cookies exist for different paths, domains, etc.)
+function parse_http_cookie(cookie)
+    local cookies = {}
+
+    if not cookie then return {} end
+
+    local cookie_str = string.gsub(cookie, "%s*;%s*", ";")   -- remove extra spaces
+
+    for k, v in string.gmatch(cookie_str, "([^;]+)=([^;]+)") do
+        -- if the key already exists,then just insert the new value
+        if cookies[k] then
+            table.insert(cookies[k], v)
+        -- otherwise, assign the new key to a table containing the one new value
+        else
+            cookies[k] = {v}
+        end
+    end
+
+    return cookies		
+end
+
+function set_http_cookie(req, cookie)
+    --key and value are required, everything else is optional
+    assert(cookie and cookie.key and cookie.value, "cookie.key and cookie.value are required")
+    --strip out cookie key/value delimiters
+    local key = string.gsub(cookie.key, "([=;]+)", "")
+    local value = string.gsub(cookie.value, "([=;]+)", "")
+    
+    local cookie_str = key .. '=' .. value
+    
+    -- if no path is specified, use the root
+    cookie_str = cookie_str .. '; ' .. 'path=' .. (cookie.path or '/')
+    
+    if cookie.domain then
+        cookie_str = cookie_str .. ';' .. 'domain=' .. cookie.domain
+    end
+    
+    if cookie.expires then
+        assert("number" == type(cookie.expires), "expires value must be a number - UNIX epoch seconds")
+        cookie_str = cookie_str .. ';' .. 'expires=' .. os.date("%a, %d-%b-%Y %X GMT", cookie.expires)
+    end		
+      
+    if cookie.http_only then cookie_str = cookie_str .. '; httponly' end
+    
+    if cookie.secure then cookie_str = cookie_str .. '; secure' end
+    
+    -- make sure we actually have a headers table before we go trying to set stuff
+    req.headers = req.headers or {}
+    -- make sure we have a set-cookie table to work with
+    req.headers['set-cookie'] = req.headers['set-cookie'] or {}
+    --insert the new cookie as a new set-cookie response header
+    table.insert(req.headers['set-cookie'], cookie_str)	
+end
+
diff -urNd tir-0.9.3-3/tir/web.lua Tir.git/tir/web.lua
--- tir-0.9.3-3/tir/web.lua	2011-07-08 14:37:40.000000000 +0800
+++ Tir.git/tir/web.lua	2012-07-13 12:00:22.557981263 +0800
@@ -47,11 +47,17 @@
     end
 
     function Web:set_cookie(cookie)
-        self.req.headers['set-cookie'] = cookie
+        set_http_cookie(self.req, cookie)
+    end
+    
+    function Web:zap_cookie(cookie)
+    	cookie.expires = 0
+    	cookie.value = 'deleted' 
+    	set_http_cookie(self.req, cookie)
     end
 
-    function Web:get_cookie()
-        return self.req.headers['cookie']
+    function Web:get_cookies()
+        return parse_http_cookie(self.req.headers['cookie'])
     end
 
     function Web:session()
