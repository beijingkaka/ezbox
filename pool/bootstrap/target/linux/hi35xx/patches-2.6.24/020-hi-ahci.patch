diff -urNd linux-2.6.24/drivers/ata/ahci.c linux-2.6.24-hi3515/drivers/ata/ahci.c
--- linux-2.6.24/drivers/ata/ahci.c	2008-01-25 06:58:37.000000000 +0800
+++ linux-2.6.24-hi3515/drivers/ata/ahci.c	2010-03-16 10:41:09.000000000 +0800
@@ -42,16 +42,55 @@
 #include <linux/dma-mapping.h>
 #include <linux/device.h>
 #include <linux/dmi.h>
+#include <linux/platform_device.h>
 #include <scsi/scsi_host.h>
 #include <scsi/scsi_cmnd.h>
 #include <linux/libata.h>
 
-#define DRV_NAME	"ahci"
-#define DRV_VERSION	"3.0"
+#define DRV_NAME "hi3515-ahci-device"
+#define DRV_VERSION "3.0"
+#define HI_SATA_BASE     0x10110000
+#define HI_SATA_IO_SIZE  0x00010000
+#define HI_SATA_INTR     29
+
+static unsigned int phy_config = 0x0e262709;
+static unsigned int enable_ncq = 0;
+static unsigned int mode_3g = 0;
+#ifdef MODULE
+module_param(phy_config,uint, 0600);
+MODULE_PARM_DESC(phy_config, "sata phy config (default:0x0e262709)");
+module_param(enable_ncq,uint, 0600);
+MODULE_PARM_DESC(enable_ncq, "enable NCQ mode (default:0(disable))");
+module_param(mode_3g,uint, 0600);
+MODULE_PARM_DESC(mode_3g, "set sata 3G mode (0:1.5G(default);1:3G)");
+#endif
 
 static int ahci_enable_alpm(struct ata_port *ap,
 		enum link_pm policy);
 static void ahci_disable_alpm(struct ata_port *ap);
+static void __iomem * hi_ahci_iomem;
+
+/* hisilicon sc reg */
+#define HI_SC_PERCTRL9 		IO_ADDRESS(0x20050054)
+#define HI_SATA_CLK_SEL 	(1 << 1)//125MHz
+#define HI_SC_PERCTRL10 	IO_ADDRESS(0x20050058)
+#define HI_SATA_RST 		(1 << 17)
+#define HI_SATA_HRST 		(1 << 18)
+#define HI_SATA_PHYRST 		(1 << 19)
+#define HI_SATA_TX0_RST 	(1 << 20)
+#define HI_SATA_TX1_RST 	(1 << 21)
+#define HI_SATA_RX0_RST 	(1 << 22)
+#define HI_SATA_RX1_RST 	(1 << 23)
+#define HI_SATA_ALIVE_RST 	(1 << 24)
+
+/* hisilicon sata reg */
+#define HI_SATA_PHY0_CTLL 	0x54
+#define HI_SATA_PHY0_CTLH 	0x58
+#define HI_SATA_PHY1_CTLL 	0x60
+#define HI_SATA_PHY1_CTLH 	0x64
+#define HI_SATA_DIS_CLK     (1 << 12) 
+#define HI_SATA_OOB_CTL 	0x6c
+#define HI_SATA_PORT_PHYCTL 0x74
 
 enum {
 	AHCI_PCI_BAR		= 5,
@@ -68,7 +107,7 @@
 	AHCI_CMD_TBL_SZ		= AHCI_CMD_TBL_HDR_SZ + (AHCI_MAX_SG * 16),
 	AHCI_CMD_TBL_AR_SZ	= AHCI_CMD_TBL_SZ * AHCI_MAX_CMDS,
 	AHCI_PORT_PRIV_DMA_SZ	= AHCI_CMD_SLOT_SZ + AHCI_CMD_TBL_AR_SZ +
-				  AHCI_RX_FIS_SZ,
+		AHCI_RX_FIS_SZ,
 	AHCI_IRQ_ON_SG		= (1 << 31),
 	AHCI_CMD_ATAPI		= (1 << 5),
 	AHCI_CMD_WRITE		= (1 << 6),
@@ -146,17 +185,17 @@
 	PORT_IRQ_D2H_REG_FIS	= (1 << 0), /* D2H Register FIS rx'd */
 
 	PORT_IRQ_FREEZE		= PORT_IRQ_HBUS_ERR |
-				  PORT_IRQ_IF_ERR |
-				  PORT_IRQ_CONNECT |
-				  PORT_IRQ_PHYRDY |
-				  PORT_IRQ_UNK_FIS |
-				  PORT_IRQ_BAD_PMP,
+		PORT_IRQ_IF_ERR |
+		PORT_IRQ_CONNECT |
+		PORT_IRQ_PHYRDY |
+		PORT_IRQ_UNK_FIS |
+		PORT_IRQ_BAD_PMP,
 	PORT_IRQ_ERROR		= PORT_IRQ_FREEZE |
-				  PORT_IRQ_TF_ERR |
-				  PORT_IRQ_HBUS_DATA_ERR,
+		PORT_IRQ_TF_ERR |
+		PORT_IRQ_HBUS_DATA_ERR,
 	DEF_PORT_IRQ		= PORT_IRQ_ERROR | PORT_IRQ_SG_DONE |
-				  PORT_IRQ_SDB_FIS | PORT_IRQ_DMAS_FIS |
-				  PORT_IRQ_PIOS_FIS | PORT_IRQ_D2H_REG_FIS,
+		PORT_IRQ_SDB_FIS | PORT_IRQ_DMAS_FIS |
+		PORT_IRQ_PIOS_FIS | PORT_IRQ_D2H_REG_FIS,
 
 	/* PORT_CMD bits */
 	PORT_CMD_ASP		= (1 << 27), /* Aggressive Slumber/Partial */
@@ -189,9 +228,9 @@
 	/* ap->flags bits */
 
 	AHCI_FLAG_COMMON		= ATA_FLAG_SATA | ATA_FLAG_NO_LEGACY |
-					  ATA_FLAG_MMIO | ATA_FLAG_PIO_DMA |
-					  ATA_FLAG_ACPI_SATA | ATA_FLAG_AN |
-					  ATA_FLAG_IPM,
+		ATA_FLAG_MMIO | ATA_FLAG_PIO_DMA |
+		ATA_FLAG_ACPI_SATA | ATA_FLAG_AN |
+		ATA_FLAG_IPM,
 	AHCI_LFLAG_COMMON		= ATA_LFLAG_SKIP_D2H_BSY,
 
 	ICH_MAP				= 0x90, /* ICH MAP register */
@@ -237,7 +276,8 @@
 
 static int ahci_scr_read(struct ata_port *ap, unsigned int sc_reg, u32 *val);
 static int ahci_scr_write(struct ata_port *ap, unsigned int sc_reg, u32 val);
-static int ahci_init_one(struct pci_dev *pdev, const struct pci_device_id *ent);
+static int __devinit		ahci_init_one(struct platform_device *pdev);
+static int __devexit ahci_remove_one(struct platform_device *pdev);
 static unsigned int ahci_qc_issue(struct ata_queued_cmd *qc);
 static void ahci_irq_clear(struct ata_port *ap);
 static int ahci_port_start(struct ata_port *ap);
@@ -256,7 +296,7 @@
 static int ahci_port_resume(struct ata_port *ap);
 static unsigned int ahci_fill_sg(struct ata_queued_cmd *qc, void *cmd_tbl);
 static void ahci_fill_cmd_slot(struct ahci_port_priv *pp, unsigned int tag,
-			       u32 opts);
+		u32 opts);
 #ifdef CONFIG_PM
 static int ahci_port_suspend(struct ata_port *ap, pm_message_t mesg);
 static int ahci_pci_device_suspend(struct pci_dev *pdev, pm_message_t mesg);
@@ -397,6 +437,7 @@
 static const struct ata_port_info ahci_port_info[] = {
 	/* board_ahci */
 	{
+		AHCI_HFLAGS	(AHCI_HFLAG_NO_NCQ),
 		.flags		= AHCI_FLAG_COMMON,
 		.link_flags	= AHCI_LFLAG_COMMON,
 		.pio_mask	= 0x1f, /* pio0-4 */
@@ -424,7 +465,7 @@
 	/* board_ahci_sb600 */
 	{
 		AHCI_HFLAGS	(AHCI_HFLAG_IGN_SERR_INTERNAL |
-				 AHCI_HFLAG_32BIT_ONLY | AHCI_HFLAG_NO_PMP),
+				AHCI_HFLAG_32BIT_ONLY | AHCI_HFLAG_NO_PMP),
 		.flags		= AHCI_FLAG_COMMON,
 		.link_flags	= AHCI_LFLAG_COMMON,
 		.pio_mask	= 0x1f, /* pio0-4 */
@@ -434,9 +475,9 @@
 	/* board_ahci_mv */
 	{
 		AHCI_HFLAGS	(AHCI_HFLAG_NO_NCQ | AHCI_HFLAG_NO_MSI |
-				 AHCI_HFLAG_MV_PATA),
+				AHCI_HFLAG_MV_PATA),
 		.flags		= ATA_FLAG_SATA | ATA_FLAG_NO_LEGACY |
-				  ATA_FLAG_MMIO | ATA_FLAG_PIO_DMA,
+			ATA_FLAG_MMIO | ATA_FLAG_PIO_DMA,
 		.link_flags	= AHCI_LFLAG_COMMON,
 		.pio_mask	= 0x1f, /* pio0-4 */
 		.udma_mask	= ATA_UDMA6,
@@ -478,7 +519,7 @@
 
 	/* JMicron 360/1/3/5/6, match class to avoid IDE function */
 	{ PCI_VENDOR_ID_JMICRON, PCI_ANY_ID, PCI_ANY_ID, PCI_ANY_ID,
-	  PCI_CLASS_STORAGE_SATA_AHCI, 0xffffff, board_ahci_ign_iferr },
+		PCI_CLASS_STORAGE_SATA_AHCI, 0xffffff, board_ahci_ign_iferr },
 
 	/* ATI */
 	{ PCI_VDEVICE(ATI, 0x4380), board_ahci_sb600 }, /* ATI SB600 */
@@ -561,21 +602,23 @@
 
 	/* Generic, PCI class code for AHCI */
 	{ PCI_ANY_ID, PCI_ANY_ID, PCI_ANY_ID, PCI_ANY_ID,
-	  PCI_CLASS_STORAGE_SATA_AHCI, 0xffffff, board_ahci },
+		PCI_CLASS_STORAGE_SATA_AHCI, 0xffffff, board_ahci },
 
 	{ }	/* terminate list */
 };
 
-
-static struct pci_driver ahci_pci_driver = {
-	.name			= DRV_NAME,
-	.id_table		= ahci_pci_tbl,
-	.probe			= ahci_init_one,
-	.remove			= ata_pci_remove_one,
+static struct platform_driver hi3515_ahci_driver =
+{
+	.probe    = ahci_init_one,
+	.remove   = __devexit_p(ahci_remove_one),
+	.driver = {
+		.name		= DRV_NAME,
+		.owner		= THIS_MODULE,
 #ifdef CONFIG_PM
-	.suspend		= ahci_pci_device_suspend,
-	.resume			= ahci_pci_device_resume,
+		.suspend	= bfin_atapi_suspend,
+		.resume		= bfin_atapi_resume,
 #endif
+	},
 };
 
 
@@ -585,9 +628,9 @@
 }
 
 static inline void __iomem *__ahci_port_base(struct ata_host *host,
-					     unsigned int port_no)
+		unsigned int port_no)
 {
-	void __iomem *mmio = host->iomap[AHCI_PCI_BAR];
+	void __iomem *mmio = hi_ahci_iomem;
 
 	return mmio + 0x100 + (port_no * 0x80);
 }
@@ -612,13 +655,13 @@
  *	LOCKING:
  *	None.
  */
-static void ahci_save_initial_config(struct pci_dev *pdev,
-				     struct ahci_host_priv *hpriv)
+static void ahci_save_initial_config(struct platform_device *pdev,
+		struct ahci_host_priv *hpriv)
 {
-	void __iomem *mmio = pcim_iomap_table(pdev)[AHCI_PCI_BAR];
+	void __iomem *mmio = hi_ahci_iomem;
 	u32 cap, port_map;
 	int i;
-
+	
 	/* Values prefixed with saved_ are written back to host after
 	 * reset.  Values without are used for driver operation.
 	 */
@@ -628,19 +671,19 @@
 	/* some chips have errata preventing 64bit use */
 	if ((cap & HOST_CAP_64) && (hpriv->flags & AHCI_HFLAG_32BIT_ONLY)) {
 		dev_printk(KERN_INFO, &pdev->dev,
-			   "controller can't do 64bit DMA, forcing 32bit\n");
+				"controller can't do 64bit DMA, forcing 32bit\n");
 		cap &= ~HOST_CAP_64;
 	}
 
 	if ((cap & HOST_CAP_NCQ) && (hpriv->flags & AHCI_HFLAG_NO_NCQ)) {
 		dev_printk(KERN_INFO, &pdev->dev,
-			   "controller can't do NCQ, turning off CAP_NCQ\n");
+				"controller can't do NCQ, turning off CAP_NCQ\n");
 		cap &= ~HOST_CAP_NCQ;
 	}
 
 	if ((cap && HOST_CAP_PMP) && (hpriv->flags & AHCI_HFLAG_NO_PMP)) {
 		dev_printk(KERN_INFO, &pdev->dev,
-			   "controller can't do PMP, turning off CAP_PMP\n");
+				"controller can't do PMP, turning off CAP_PMP\n");
 		cap &= ~HOST_CAP_PMP;
 	}
 
@@ -651,9 +694,9 @@
 	 */
 	if (hpriv->flags & AHCI_HFLAG_MV_PATA) {
 		dev_printk(KERN_ERR, &pdev->dev,
-			   "MV_AHCI HACK: port_map %x -> %x\n",
-			   hpriv->port_map,
-			   hpriv->port_map & 0xf);
+				"MV_AHCI HACK: port_map %x -> %x\n",
+				hpriv->port_map,
+				hpriv->port_map & 0xf);
 
 		port_map &= 0xf;
 	}
@@ -675,9 +718,9 @@
 		 */
 		if (n_ports || tmp_port_map) {
 			dev_printk(KERN_WARNING, &pdev->dev,
-				   "nr_ports (%u) and implemented port map "
-				   "(0x%x) don't match, using nr_ports\n",
-				   ahci_nr_ports(cap), port_map);
+					"nr_ports (%u) and implemented port map "
+					"(0x%x) don't match, using nr_ports\n",
+					ahci_nr_ports(cap), port_map);
 			port_map = 0;
 		}
 	}
@@ -686,7 +729,7 @@
 	if (!port_map) {
 		port_map = (1 << ahci_nr_ports(cap)) - 1;
 		dev_printk(KERN_WARNING, &pdev->dev,
-			   "forcing PORTS_IMPL to 0x%x\n", port_map);
+				"forcing PORTS_IMPL to 0x%x\n", port_map);
 
 		/* write the fixed up value to the PI register */
 		hpriv->saved_port_map = port_map;
@@ -709,7 +752,7 @@
 static void ahci_restore_initial_config(struct ata_host *host)
 {
 	struct ahci_host_priv *hpriv = host->private_data;
-	void __iomem *mmio = host->iomap[AHCI_PCI_BAR];
+	void __iomem *mmio = hi_ahci_iomem;
 
 	writel(hpriv->saved_cap, mmio + HOST_CAP);
 	writel(hpriv->saved_port_map, mmio + HOST_PORTS_IMPL);
@@ -728,7 +771,7 @@
 	struct ahci_host_priv *hpriv = ap->host->private_data;
 
 	if (sc_reg < ARRAY_SIZE(offset) &&
-	    (sc_reg != SCR_NOTIFICATION || (hpriv->cap & HOST_CAP_SNTF)))
+			(sc_reg != SCR_NOTIFICATION || (hpriv->cap & HOST_CAP_SNTF)))
 		return offset[sc_reg];
 	return 0;
 }
@@ -786,7 +829,7 @@
 
 	/* wait for engine to stop. This could be as long as 500 msec */
 	tmp = ata_wait_register(port_mmio + PORT_CMD,
-				PORT_CMD_LIST_ON, PORT_CMD_LIST_ON, 1, 500);
+			PORT_CMD_LIST_ON, PORT_CMD_LIST_ON, 1, 500);
 	if (tmp & PORT_CMD_LIST_ON)
 		return -EIO;
 
@@ -803,12 +846,12 @@
 	/* set FIS registers */
 	if (hpriv->cap & HOST_CAP_64)
 		writel((pp->cmd_slot_dma >> 16) >> 16,
-		       port_mmio + PORT_LST_ADDR_HI);
+				port_mmio + PORT_LST_ADDR_HI);
 	writel(pp->cmd_slot_dma & 0xffffffff, port_mmio + PORT_LST_ADDR);
 
 	if (hpriv->cap & HOST_CAP_64)
 		writel((pp->rx_fis_dma >> 16) >> 16,
-		       port_mmio + PORT_FIS_ADDR_HI);
+				port_mmio + PORT_FIS_ADDR_HI);
 	writel(pp->rx_fis_dma & 0xffffffff, port_mmio + PORT_FIS_ADDR);
 
 	/* enable FIS reception */
@@ -832,7 +875,7 @@
 
 	/* wait for completion, spec says 500ms, give it 1000 */
 	tmp = ata_wait_register(port_mmio + PORT_CMD, PORT_CMD_FIS_ON,
-				PORT_CMD_FIS_ON, 10, 1000);
+			PORT_CMD_FIS_ON, 10, 1000);
 	if (tmp & PORT_CMD_FIS_ON)
 		return -EBUSY;
 
@@ -889,25 +932,25 @@
 	ahci_scr_write(ap, SCR_ERROR, ((1 << 16) | (1 << 18)));
 
 	/*
- 	 * Clear flag to indicate that we should ignore all PhyRdy
- 	 * state changes
- 	 */
+	 * Clear flag to indicate that we should ignore all PhyRdy
+	 * state changes
+	 */
 	hpriv->flags &= ~AHCI_HFLAG_NO_HOTPLUG;
 
 	/*
- 	 * Enable interrupts on Phy Ready.
- 	 */
+	 * Enable interrupts on Phy Ready.
+	 */
 	pp->intr_mask |= PORT_IRQ_PHYRDY;
 	writel(pp->intr_mask, port_mmio + PORT_IRQ_MASK);
 
 	/*
- 	 * don't change the link pm policy - we can be called
- 	 * just to turn of link pm temporarily
- 	 */
+	 * don't change the link pm policy - we can be called
+	 * just to turn of link pm temporarily
+	 */
 }
 
 static int ahci_enable_alpm(struct ata_port *ap,
-	enum link_pm policy)
+		enum link_pm policy)
 {
 	struct ahci_host_priv *hpriv = ap->host->private_data;
 	void __iomem *port_mmio = ahci_port_base(ap);
@@ -920,57 +963,57 @@
 		return -EINVAL;
 
 	switch (policy) {
-	case MAX_PERFORMANCE:
-	case NOT_AVAILABLE:
-		/*
- 		 * if we came here with NOT_AVAILABLE,
- 		 * it just means this is the first time we
- 		 * have tried to enable - default to max performance,
- 		 * and let the user go to lower power modes on request.
- 		 */
-		ahci_disable_alpm(ap);
-		return 0;
-	case MIN_POWER:
-		/* configure HBA to enter SLUMBER */
-		asp = PORT_CMD_ASP;
-		break;
-	case MEDIUM_POWER:
-		/* configure HBA to enter PARTIAL */
-		asp = 0;
-		break;
-	default:
-		return -EINVAL;
+		case MAX_PERFORMANCE:
+		case NOT_AVAILABLE:
+			/*
+			 * if we came here with NOT_AVAILABLE,
+			 * it just means this is the first time we
+			 * have tried to enable - default to max performance,
+			 * and let the user go to lower power modes on request.
+			 */
+			ahci_disable_alpm(ap);
+			return 0;
+		case MIN_POWER:
+			/* configure HBA to enter SLUMBER */
+			asp = PORT_CMD_ASP;
+			break;
+		case MEDIUM_POWER:
+			/* configure HBA to enter PARTIAL */
+			asp = 0;
+			break;
+		default:
+			return -EINVAL;
 	}
 
 	/*
- 	 * Disable interrupts on Phy Ready. This keeps us from
- 	 * getting woken up due to spurious phy ready interrupts
+	 * Disable interrupts on Phy Ready. This keeps us from
+	 * getting woken up due to spurious phy ready interrupts
 	 * TBD - Hot plug should be done via polling now, is
 	 * that even supported?
- 	 */
+	 */
 	pp->intr_mask &= ~PORT_IRQ_PHYRDY;
 	writel(pp->intr_mask, port_mmio + PORT_IRQ_MASK);
 
 	/*
- 	 * Set a flag to indicate that we should ignore all PhyRdy
- 	 * state changes since these can happen now whenever we
- 	 * change link state
- 	 */
+	 * Set a flag to indicate that we should ignore all PhyRdy
+	 * state changes since these can happen now whenever we
+	 * change link state
+	 */
 	hpriv->flags |= AHCI_HFLAG_NO_HOTPLUG;
 
 	/* get the existing command bits */
 	cmd = readl(port_mmio + PORT_CMD);
 
 	/*
- 	 * Set ASP based on Policy
- 	 */
+	 * Set ASP based on Policy
+	 */
 	cmd |= asp;
 
 	/*
- 	 * Setting this bit will instruct the HBA to aggressively
- 	 * enter a lower power link state when it's appropriate and
- 	 * based on the value set above for ASP
- 	 */
+	 * Setting this bit will instruct the HBA to aggressively
+	 * enter a lower power link state when it's appropriate and
+	 * based on the value set above for ASP
+	 */
 	cmd |= PORT_CMD_ALPE;
 
 	/* write out new cmd value */
@@ -1035,10 +1078,57 @@
 
 static int ahci_reset_controller(struct ata_host *host)
 {
-	struct pci_dev *pdev = to_pci_dev(host->dev);
-	void __iomem *mmio = host->iomap[AHCI_PCI_BAR];
+	void __iomem *mmio = hi_ahci_iomem;
+	void __iomem *port_mmio;
+	int i;
 	u32 tmp;
 
+	tmp = readl(HI_SC_PERCTRL10);
+	tmp |= HI_SATA_PHYRST;
+	writel(tmp,HI_SC_PERCTRL10);//undo phy reset
+	msleep(1);
+	tmp = readl(mmio + HI_SATA_PHY0_CTLH);
+	tmp |= HI_SATA_DIS_CLK;
+	writel(tmp,(mmio + HI_SATA_PHY0_CTLH));
+	tmp = readl(mmio + HI_SATA_PHY1_CTLH);
+	tmp |= HI_SATA_DIS_CLK;
+	writel(tmp,(mmio + HI_SATA_PHY1_CTLH));
+    if(mode_3g){
+        tmp = 0x8a0ec888;
+    }
+    else{
+        tmp = 0x8a0ec788;
+    }
+	writel(tmp,(mmio + HI_SATA_PHY0_CTLL));
+	writel(0x2121,(mmio + HI_SATA_PHY0_CTLH));
+	writel(tmp,(mmio + HI_SATA_PHY1_CTLL));
+	writel(0x2121,(mmio + HI_SATA_PHY1_CTLH));	
+	writel(0x84060c15,(mmio + HI_SATA_OOB_CTL));	
+	
+	for (i = 0; i < host->n_ports; i++) {
+		struct ata_port *ap = host->ports[i];
+
+		port_mmio = ahci_port_base(ap);
+		if (ata_port_is_dummy(ap))
+			continue;
+
+		/* for GEN set phy */
+		writel(phy_config,(port_mmio + HI_SATA_PORT_PHYCTL));
+	}
+	tmp = readl(HI_SC_PERCTRL10);
+	tmp &= ~HI_SATA_PHYRST;
+	writel(tmp,HI_SC_PERCTRL10);//phy reset
+	msleep(1);
+	tmp = readl(HI_SC_PERCTRL10);
+	tmp |= HI_SATA_PHYRST;
+	writel(tmp,HI_SC_PERCTRL10);//undo phy reset 
+	msleep(1);
+	tmp = readl(HI_SC_PERCTRL10);
+	tmp |= HI_SATA_RST | HI_SATA_RX0_RST | HI_SATA_TX0_RST 
+	     | HI_SATA_RX1_RST | HI_SATA_TX1_RST | HI_SATA_ALIVE_RST;
+	writel(tmp,HI_SC_PERCTRL10);//undo several sata clk domain reset
+	msleep(1);
+
 	/* we must be in AHCI mode, before using anything
 	 * AHCI-specific, such as HOST_RESET.
 	 */
@@ -1060,9 +1150,9 @@
 	ssleep(1);
 
 	tmp = readl(mmio + HOST_CTL);
-	if (tmp & HOST_RESET) {
+	if (!tmp) {
 		dev_printk(KERN_ERR, host->dev,
-			   "controller reset failed (0x%x)\n", tmp);
+				"controller reset failed (0x%x)\n", tmp);
 		return -EIO;
 	}
 
@@ -1073,6 +1163,7 @@
 	/* some registers might be cleared on reset.  restore initial values */
 	ahci_restore_initial_config(host);
 
+#if 0
 	if (pdev->vendor == PCI_VENDOR_ID_INTEL) {
 		u16 tmp16;
 
@@ -1081,13 +1172,14 @@
 		tmp16 |= 0xf;
 		pci_write_config_word(pdev, 0x92, tmp16);
 	}
+#endif 
 
 	return 0;
 }
 
-static void ahci_port_init(struct pci_dev *pdev, struct ata_port *ap,
-			   int port_no, void __iomem *mmio,
-			   void __iomem *port_mmio)
+static void ahci_port_init(struct platform_device *pdev , struct ata_port *ap,
+		int port_no, void __iomem *mmio,
+		void __iomem *port_mmio)
 {
 	const char *emsg = NULL;
 	int rc;
@@ -1097,7 +1189,7 @@
 	rc = ahci_deinit_port(ap, &emsg);
 	if (rc)
 		dev_printk(KERN_WARNING, &pdev->dev,
-			   "%s (%d)\n", emsg, rc);
+				"%s (%d)\n", emsg, rc);
 
 	/* clear SError */
 	tmp = readl(port_mmio + PORT_SCR_ERR);
@@ -1116,10 +1208,10 @@
 static void ahci_init_controller(struct ata_host *host)
 {
 	struct ahci_host_priv *hpriv = host->private_data;
-	struct pci_dev *pdev = to_pci_dev(host->dev);
-	void __iomem *mmio = host->iomap[AHCI_PCI_BAR];
-	int i;
+	struct platform_device *pdev = to_platform_device(host->dev);
+	void __iomem *mmio = hi_ahci_iomem; 
 	void __iomem *port_mmio;
+	int i;
 	u32 tmp;
 
 	if (hpriv->flags & AHCI_HFLAG_MV_PATA) {
@@ -1167,7 +1259,7 @@
 }
 
 static void ahci_fill_cmd_slot(struct ahci_port_priv *pp, unsigned int tag,
-			       u32 opts)
+		u32 opts)
 {
 	dma_addr_t cmd_tbl_dma;
 
@@ -1214,19 +1306,19 @@
 
 	rc = 0;
 	tmp = ata_wait_register(port_mmio + PORT_CMD,
-				PORT_CMD_CLO, PORT_CMD_CLO, 1, 500);
+			PORT_CMD_CLO, PORT_CMD_CLO, 1, 500);
 	if (tmp & PORT_CMD_CLO)
 		rc = -EIO;
 
 	/* restart engine */
- out_restart:
+out_restart:
 	ahci_start_engine(ap);
 	return rc;
 }
 
 static int ahci_exec_polled_cmd(struct ata_port *ap, int pmp,
-				struct ata_taskfile *tf, int is_cmd, u16 flags,
-				unsigned long timeout_msec)
+		struct ata_taskfile *tf, int is_cmd, u16 flags,
+		unsigned long timeout_msec)
 {
 	const u32 cmd_fis_len = 5; /* five dwords */
 	struct ahci_port_priv *pp = ap->private_data;
@@ -1243,7 +1335,7 @@
 
 	if (timeout_msec) {
 		tmp = ata_wait_register(port_mmio + PORT_CMD_ISSUE, 0x1, 0x1,
-					1, timeout_msec);
+				1, timeout_msec);
 		if (tmp & 0x1) {
 			ahci_kick_engine(ap, 1);
 			return -EBUSY;
@@ -1255,7 +1347,7 @@
 }
 
 static int ahci_do_softreset(struct ata_link *link, unsigned int *class,
-			     int pmp, unsigned long deadline)
+		int pmp, unsigned long deadline)
 {
 	struct ata_port *ap = link->ap;
 	const char *reason = NULL;
@@ -1287,7 +1379,7 @@
 
 	tf.ctl |= ATA_SRST;
 	if (ahci_exec_polled_cmd(ap, pmp, &tf, 0,
-				 AHCI_CMD_RESET | AHCI_CMD_CLR_BUSY, msecs)) {
+				AHCI_CMD_RESET | AHCI_CMD_CLR_BUSY, msecs)) {
 		rc = -EIO;
 		reason = "1st FIS failed";
 		goto fail;
@@ -1314,13 +1406,13 @@
 	DPRINTK("EXIT, class=%u\n", *class);
 	return 0;
 
- fail:
+fail:
 	ata_link_printk(link, KERN_ERR, "softreset failed (%s)\n", reason);
 	return rc;
 }
 
 static int ahci_softreset(struct ata_link *link, unsigned int *class,
-			  unsigned long deadline)
+		unsigned long deadline)
 {
 	int pmp = 0;
 
@@ -1331,7 +1423,7 @@
 }
 
 static int ahci_hardreset(struct ata_link *link, unsigned int *class,
-			  unsigned long deadline)
+		unsigned long deadline)
 {
 	struct ata_port *ap = link->ap;
 	struct ahci_port_priv *pp = ap->private_data;
@@ -1362,7 +1454,7 @@
 }
 
 static int ahci_vt8251_hardreset(struct ata_link *link, unsigned int *class,
-				 unsigned long deadline)
+		unsigned long deadline)
 {
 	struct ata_port *ap = link->ap;
 	u32 serror;
@@ -1373,7 +1465,7 @@
 	ahci_stop_engine(ap);
 
 	rc = sata_link_hardreset(link, sata_ehc_deb_timing(&link->eh_context),
-				 deadline);
+			deadline);
 
 	/* vt8251 needs SError cleared for the port to operate */
 	ahci_scr_read(ap, SCR_ERROR, &serror);
@@ -1390,7 +1482,7 @@
 }
 
 static int ahci_p5wdh_hardreset(struct ata_link *link, unsigned int *class,
-				unsigned long deadline)
+		unsigned long deadline)
 {
 	struct ata_port *ap = link->ap;
 	struct ahci_port_priv *pp = ap->private_data;
@@ -1406,7 +1498,7 @@
 	ata_tf_to_fis(&tf, 0, 0, d2h_fis);
 
 	rc = sata_link_hardreset(link, sata_ehc_deb_timing(&link->eh_context),
-				 deadline);
+			deadline);
 
 	ahci_start_engine(ap);
 
@@ -1457,7 +1549,7 @@
 }
 
 static int ahci_pmp_softreset(struct ata_link *link, unsigned int *class,
-			      unsigned long deadline)
+		unsigned long deadline)
 {
 	return ahci_do_softreset(link, class, link->pmp, deadline);
 }
@@ -1595,8 +1687,8 @@
 		active_ehi->err_mask |= AC_ERR_HSM;
 		active_ehi->action |= ATA_EH_SOFTRESET;
 		ata_ehi_push_desc(active_ehi,
-				  "unknown FIS %08x %08x %08x %08x" ,
-				  unk[0], unk[1], unk[2], unk[3]);
+				"unknown FIS %08x %08x %08x %08x" ,
+				unk[0], unk[1], unk[2], unk[3]);
 	}
 
 	if (ap->nr_pmp_links && (irq_stat & PORT_IRQ_BAD_PMP)) {
@@ -1620,8 +1712,8 @@
 	if (irq_stat & (PORT_IRQ_CONNECT | PORT_IRQ_PHYRDY)) {
 		ata_ehi_hotplugged(host_ehi);
 		ata_ehi_push_desc(host_ehi, "%s",
-			irq_stat & PORT_IRQ_CONNECT ?
-			"connection status changed" : "PHY RDY changed");
+				irq_stat & PORT_IRQ_CONNECT ?
+				"connection status changed" : "PHY RDY changed");
 	}
 
 	/* okay, let's hand over to EH */
@@ -1644,18 +1736,17 @@
 
 	status = readl(port_mmio + PORT_IRQ_STAT);
 	writel(status, port_mmio + PORT_IRQ_STAT);
-
 	/* ignore BAD_PMP while resetting */
 	if (unlikely(resetting))
 		status &= ~PORT_IRQ_BAD_PMP;
 
 	/* If we are getting PhyRdy, this is
- 	 * just a power state change, we should
- 	 * clear out this, plus the PhyRdy/Comm
- 	 * Wake bits from Serror
- 	 */
+	 * just a power state change, we should
+	 * clear out this, plus the PhyRdy/Comm
+	 * Wake bits from Serror
+	 */
 	if ((hpriv->flags & AHCI_HFLAG_NO_HOTPLUG) &&
-		(status & PORT_IRQ_PHYRDY)) {
+			(status & PORT_IRQ_PHYRDY)) {
 		status &= ~PORT_IRQ_PHYRDY;
 		ahci_scr_write(ap, SCR_ERROR, ((1 << 16) | (1 << 18)));
 	}
@@ -1716,13 +1807,12 @@
 	struct ata_host *host = dev_instance;
 	struct ahci_host_priv *hpriv;
 	unsigned int i, handled = 0;
-	void __iomem *mmio;
+	void __iomem *mmio = hi_ahci_iomem;
 	u32 irq_stat, irq_ack = 0;
 
 	VPRINTK("ENTER\n");
 
 	hpriv = host->private_data;
-	mmio = host->iomap[AHCI_PCI_BAR];
 
 	/* sigh.  0xffffffff is a valid return from h/w */
 	irq_stat = readl(mmio + HOST_IRQ_STAT);
@@ -1746,7 +1836,7 @@
 			VPRINTK("port %u (no irq)\n", i);
 			if (ata_ratelimit())
 				dev_printk(KERN_WARNING, host->dev,
-					"interrupt on disabled port %u\n", i);
+						"interrupt on disabled port %u\n", i);
 		}
 
 		irq_ack |= (1 << i);
@@ -1780,7 +1870,6 @@
 		writel(1 << qc->tag, port_mmio + PORT_SCR_ACT);
 	writel(1 << qc->tag, port_mmio + PORT_CMD_ISSUE);
 	readl(port_mmio + PORT_CMD_ISSUE);	/* flush */
-
 	return 0;
 }
 
@@ -1794,10 +1883,10 @@
 
 static void ahci_thaw(struct ata_port *ap)
 {
-	void __iomem *mmio = ap->host->iomap[AHCI_PCI_BAR];
+	void __iomem *mmio = hi_ahci_iomem;
 	void __iomem *port_mmio = ahci_port_base(ap);
-	u32 tmp;
 	struct ahci_port_priv *pp = ap->private_data;
+	u32 tmp;
 
 	/* clear IRQ */
 	tmp = readl(port_mmio + PORT_IRQ_STAT);
@@ -1815,12 +1904,11 @@
 		ahci_stop_engine(ap);
 		ahci_start_engine(ap);
 	}
-
 	/* perform recovery */
 	sata_pmp_do_eh(ap, ata_std_prereset, ahci_softreset,
-		       ahci_hardreset, ahci_postreset,
-		       sata_pmp_std_prereset, ahci_pmp_softreset,
-		       sata_pmp_std_hardreset, sata_pmp_std_postreset);
+			ahci_hardreset, ahci_postreset,
+			sata_pmp_std_prereset, ahci_pmp_softreset,
+			sata_pmp_std_hardreset, sata_pmp_std_postreset);
 }
 
 static void ahci_vt8251_error_handler(struct ata_port *ap)
@@ -1833,7 +1921,7 @@
 
 	/* perform recovery */
 	ata_do_eh(ap, ata_std_prereset, ahci_softreset, ahci_vt8251_hardreset,
-		  ahci_postreset);
+			ahci_postreset);
 }
 
 static void ahci_p5wdh_error_handler(struct ata_port *ap)
@@ -1846,7 +1934,7 @@
 
 	/* perform recovery */
 	ata_do_eh(ap, ata_std_prereset, ahci_softreset, ahci_p5wdh_hardreset,
-		  ahci_postreset);
+			ahci_postreset);
 }
 
 static void ahci_post_internal_cmd(struct ata_queued_cmd *qc)
@@ -1918,45 +2006,14 @@
 
 static int ahci_pci_device_suspend(struct pci_dev *pdev, pm_message_t mesg)
 {
-	struct ata_host *host = dev_get_drvdata(&pdev->dev);
-	void __iomem *mmio = host->iomap[AHCI_PCI_BAR];
-	u32 ctl;
-
-	if (mesg.event == PM_EVENT_SUSPEND) {
-		/* AHCI spec rev1.1 section 8.3.3:
-		 * Software must disable interrupts prior to requesting a
-		 * transition of the HBA to D3 state.
-		 */
-		ctl = readl(mmio + HOST_CTL);
-		ctl &= ~HOST_IRQ_EN;
-		writel(ctl, mmio + HOST_CTL);
-		readl(mmio + HOST_CTL); /* flush */
-	}
-
-	return ata_pci_device_suspend(pdev, mesg);
+	return 0;
 }
 
 static int ahci_pci_device_resume(struct pci_dev *pdev)
 {
-	struct ata_host *host = dev_get_drvdata(&pdev->dev);
-	int rc;
-
-	rc = ata_pci_device_do_resume(pdev);
-	if (rc)
-		return rc;
-
-	if (pdev->dev.power.power_state.event == PM_EVENT_SUSPEND) {
-		rc = ahci_reset_controller(host);
-		if (rc)
-			return rc;
-
-		ahci_init_controller(host);
-	}
-
-	ata_host_resume(host);
-
 	return 0;
 }
+
 #endif
 
 static int ahci_port_start(struct ata_port *ap)
@@ -1976,7 +2033,7 @@
 		return rc;
 
 	mem = dmam_alloc_coherent(dev, AHCI_PORT_PRIV_DMA_SZ, &mem_dma,
-				  GFP_KERNEL);
+			GFP_KERNEL);
 	if (!mem)
 		return -ENOMEM;
 	memset(mem, 0, AHCI_PORT_PRIV_DMA_SZ);
@@ -2030,18 +2087,19 @@
 		ata_port_printk(ap, KERN_WARNING, "%s (%d)\n", emsg, rc);
 }
 
+#if 0
 static int ahci_configure_dma_masks(struct pci_dev *pdev, int using_dac)
 {
 	int rc;
 
 	if (using_dac &&
-	    !pci_set_dma_mask(pdev, DMA_64BIT_MASK)) {
+			!pci_set_dma_mask(pdev, DMA_64BIT_MASK)) {
 		rc = pci_set_consistent_dma_mask(pdev, DMA_64BIT_MASK);
 		if (rc) {
 			rc = pci_set_consistent_dma_mask(pdev, DMA_32BIT_MASK);
 			if (rc) {
 				dev_printk(KERN_ERR, &pdev->dev,
-					   "64-bit DMA enable failed\n");
+						"64-bit DMA enable failed\n");
 				return rc;
 			}
 		}
@@ -2049,13 +2107,13 @@
 		rc = pci_set_dma_mask(pdev, DMA_32BIT_MASK);
 		if (rc) {
 			dev_printk(KERN_ERR, &pdev->dev,
-				   "32-bit DMA enable failed\n");
+					"32-bit DMA enable failed\n");
 			return rc;
 		}
 		rc = pci_set_consistent_dma_mask(pdev, DMA_32BIT_MASK);
 		if (rc) {
 			dev_printk(KERN_ERR, &pdev->dev,
-				   "32-bit consistent DMA enable failed\n");
+					"32-bit consistent DMA enable failed\n");
 			return rc;
 		}
 	}
@@ -2066,7 +2124,7 @@
 {
 	struct ahci_host_priv *hpriv = host->private_data;
 	struct pci_dev *pdev = to_pci_dev(host->dev);
-	void __iomem *mmio = host->iomap[AHCI_PCI_BAR];
+	void __iomem *mmio = hi_ahci_iomem;
 	u32 vers, cap, impl, speed;
 	const char *speed_s;
 	u16 cc;
@@ -2095,43 +2153,43 @@
 		scc_s = "unknown";
 
 	dev_printk(KERN_INFO, &pdev->dev,
-		"AHCI %02x%02x.%02x%02x "
-		"%u slots %u ports %s Gbps 0x%x impl %s mode\n"
-		,
+			"AHCI %02x%02x.%02x%02x "
+			"%u slots %u ports %s Gbps 0x%x impl %s mode\n"
+			,
 
-		(vers >> 24) & 0xff,
-		(vers >> 16) & 0xff,
-		(vers >> 8) & 0xff,
-		vers & 0xff,
+			(vers >> 24) & 0xff,
+			(vers >> 16) & 0xff,
+			(vers >> 8) & 0xff,
+			vers & 0xff,
 
-		((cap >> 8) & 0x1f) + 1,
-		(cap & 0x1f) + 1,
-		speed_s,
-		impl,
-		scc_s);
+			((cap >> 8) & 0x1f) + 1,
+			(cap & 0x1f) + 1,
+			speed_s,
+			impl,
+			scc_s);
 
 	dev_printk(KERN_INFO, &pdev->dev,
-		"flags: "
-		"%s%s%s%s%s%s%s"
-		"%s%s%s%s%s%s%s\n"
-		,
+			"flags: "
+			"%s%s%s%s%s%s%s"
+			"%s%s%s%s%s%s%s\n"
+			,
 
-		cap & (1 << 31) ? "64bit " : "",
-		cap & (1 << 30) ? "ncq " : "",
-		cap & (1 << 29) ? "sntf " : "",
-		cap & (1 << 28) ? "ilck " : "",
-		cap & (1 << 27) ? "stag " : "",
-		cap & (1 << 26) ? "pm " : "",
-		cap & (1 << 25) ? "led " : "",
+			cap & (1 << 31) ? "64bit " : "",
+			cap & (1 << 30) ? "ncq " : "",
+			cap & (1 << 29) ? "sntf " : "",
+			cap & (1 << 28) ? "ilck " : "",
+			cap & (1 << 27) ? "stag " : "",
+			cap & (1 << 26) ? "pm " : "",
+			cap & (1 << 25) ? "led " : "",
 
-		cap & (1 << 24) ? "clo " : "",
-		cap & (1 << 19) ? "nz " : "",
-		cap & (1 << 18) ? "only " : "",
-		cap & (1 << 17) ? "pmp " : "",
-		cap & (1 << 15) ? "pio " : "",
-		cap & (1 << 14) ? "slum " : "",
-		cap & (1 << 13) ? "part " : ""
-		);
+			cap & (1 << 24) ? "clo " : "",
+			cap & (1 << 19) ? "nz " : "",
+			cap & (1 << 18) ? "only " : "",
+			cap & (1 << 17) ? "pmp " : "",
+			cap & (1 << 15) ? "pio " : "",
+			cap & (1 << 14) ? "slum " : "",
+			cap & (1 << 13) ? "part " : ""
+				);
 }
 
 /* On ASUS P5W DH Deluxe, the second port of PCI device 00:1f.2 is
@@ -2159,7 +2217,7 @@
 			.ident = "P5W DH Deluxe",
 			.matches = {
 				DMI_MATCH(DMI_SYS_VENDOR,
-					  "ASUSTEK COMPUTER INC"),
+						"ASUSTEK COMPUTER INC"),
 				DMI_MATCH(DMI_PRODUCT_NAME, "P5W DH Deluxe"),
 			},
 		},
@@ -2168,21 +2226,22 @@
 	struct pci_dev *pdev = to_pci_dev(host->dev);
 
 	if (pdev->bus->number == 0 && pdev->devfn == PCI_DEVFN(0x1f, 2) &&
-	    dmi_check_system(sysids)) {
+			dmi_check_system(sysids)) {
 		struct ata_port *ap = host->ports[1];
 
 		dev_printk(KERN_INFO, &pdev->dev, "enabling ASUS P5W DH "
-			   "Deluxe on-board SIMG4726 workaround\n");
+				"Deluxe on-board SIMG4726 workaround\n");
 
 		ap->ops = &ahci_p5wdh_ops;
 		ap->link.flags |= ATA_LFLAG_NO_SRST | ATA_LFLAG_ASSUME_ATA;
 	}
 }
+#endif
 
-static int ahci_init_one(struct pci_dev *pdev, const struct pci_device_id *ent)
+static int __devinit ahci_init_one(struct platform_device *pdev)
 {
 	static int printed_version;
-	struct ata_port_info pi = ahci_port_info[ent->driver_data];
+	struct ata_port_info pi = ahci_port_info[0];
 	const struct ata_port_info *ppi[] = { &pi, NULL };
 	struct device *dev = &pdev->dev;
 	struct ahci_host_priv *hpriv;
@@ -2196,41 +2255,13 @@
 	if (!printed_version++)
 		dev_printk(KERN_DEBUG, &pdev->dev, "version " DRV_VERSION "\n");
 
-	/* acquire resources */
-	rc = pcim_enable_device(pdev);
-	if (rc)
-		return rc;
-
-	rc = pcim_iomap_regions(pdev, 1 << AHCI_PCI_BAR, DRV_NAME);
-	if (rc == -EBUSY)
-		pcim_pin_device(pdev);
-	if (rc)
-		return rc;
-
-	if (pdev->vendor == PCI_VENDOR_ID_INTEL &&
-	    (pdev->device == 0x2652 || pdev->device == 0x2653)) {
-		u8 map;
-
-		/* ICH6s share the same PCI ID for both piix and ahci
-		 * modes.  Enabling ahci mode while MAP indicates
-		 * combined mode is a bad idea.  Yield to ata_piix.
-		 */
-		pci_read_config_byte(pdev, ICH_MAP, &map);
-		if (map & 0x3) {
-			dev_printk(KERN_INFO, &pdev->dev, "controller is in "
-				   "combined mode, can't enable AHCI mode\n");
-			return -ENODEV;
-		}
-	}
-
 	hpriv = devm_kzalloc(dev, sizeof(*hpriv), GFP_KERNEL);
 	if (!hpriv)
 		return -ENOMEM;
 	hpriv->flags |= (unsigned long)pi.private_data;
-
-	if ((hpriv->flags & AHCI_HFLAG_NO_MSI) || pci_enable_msi(pdev))
-		pci_intx(pdev, 1);
-
+    if(enable_ncq){
+        hpriv->flags &= (~AHCI_HFLAG_NO_NCQ);
+    }
 	/* save initial config */
 	ahci_save_initial_config(pdev, hpriv);
 
@@ -2244,16 +2275,17 @@
 	host = ata_host_alloc_pinfo(&pdev->dev, ppi, fls(hpriv->port_map));
 	if (!host)
 		return -ENOMEM;
-	host->iomap = pcim_iomap_table(pdev);
+
 	host->private_data = hpriv;
 
 	for (i = 0; i < host->n_ports; i++) {
 		struct ata_port *ap = host->ports[i];
 		void __iomem *port_mmio = ahci_port_base(ap);
-
+#if 0
 		ata_port_pbar_desc(ap, AHCI_PCI_BAR, -1, "abar");
 		ata_port_pbar_desc(ap, AHCI_PCI_BAR,
-				   0x100 + ap->port_no * 0x80, "port");
+				0x100 + ap->port_no * 0x80, "port");
+#endif
 
 		/* set initial link pm policy */
 		ap->pm_policy = NOT_AVAILABLE;
@@ -2268,40 +2300,112 @@
 	}
 
 	/* apply workaround for ASUS P5W DH Deluxe mainboard */
-	ahci_p5wdh_workaround(host);
+	//ahci_p5wdh_workaround(host);
 
 	/* initialize adapter */
-	rc = ahci_configure_dma_masks(pdev, hpriv->cap & HOST_CAP_64);
-	if (rc)
-		return rc;
+	//rc = ahci_configure_dma_masks(pdev, hpriv->cap & HOST_CAP_64);
+	//if (rc)
+	//	return rc;
 
 	rc = ahci_reset_controller(host);
 	if (rc)
 		return rc;
 
 	ahci_init_controller(host);
-	ahci_print_info(host);
+	//ahci_print_info(host);
 
-	pci_set_master(pdev);
-	return ata_host_activate(host, pdev->irq, ahci_interrupt, IRQF_SHARED,
-				 &ahci_sht);
+	//pci_set_master(pdev);
+	return ata_host_activate(host, pdev->resource[1].start, ahci_interrupt, IRQF_SHARED,
+			&ahci_sht);
+}
+
+static int __devexit ahci_remove_one(struct platform_device *pdev)
+{
+	struct device *dev = &pdev->dev;
+	struct ata_host *host = dev_get_drvdata(dev);
+
+	ata_host_detach(host);
+
+	return 0;
+}
+
+/* AHCI */
+static struct resource hi3515_ahci_resources[] = {
+	[0] = {
+		.start          = HI_SATA_BASE,
+		.end            = HI_SATA_BASE + HI_SATA_IO_SIZE - 1,
+		.flags          = IORESOURCE_MEM,
+	},
+	[1] = {
+		.start          = HI_SATA_INTR,
+		.end            = HI_SATA_INTR,
+	},
+};
+
+static u64 ahci_dmamask = ~(u32)0;
+
+static void hi3515_ahci_platdev_release(struct device *dev)
+{
 }
 
+static struct platform_device hi3515_ahci_device = {
+	.name           = "hi3515-ahci-device",
+	.dev = {
+		.dma_mask               = &ahci_dmamask,
+		.coherent_dma_mask      = 0xffffffff,
+		.release                = hi3515_ahci_platdev_release,
+	},
+	.num_resources  = ARRAY_SIZE(hi3515_ahci_resources),
+	.resource       = hi3515_ahci_resources,
+};
+
 static int __init ahci_init(void)
 {
-	return pci_register_driver(&ahci_pci_driver);
+	int ret;
+	u32 tmp;
+	
+	//disassert bus reset
+	tmp = readl(HI_SC_PERCTRL9);
+	tmp |= HI_SATA_CLK_SEL;
+	writel(tmp,HI_SC_PERCTRL9);//125M clk
+	tmp = readl(HI_SC_PERCTRL10);
+	tmp |= HI_SATA_HRST;
+	writel(tmp,HI_SC_PERCTRL10);//undo controler reset
+	msleep(1);
+	
+	hi_ahci_iomem = (void __iomem *)ioremap_nocache(HI_SATA_BASE, HI_SATA_IO_SIZE);
+	if(!hi_ahci_iomem){
+		return  -ENOMEM;
+	}
+
+	ret = platform_device_register(&hi3515_ahci_device);
+	if(ret){
+		iounmap(hi_ahci_iomem);
+		return ret;
+	}
+
+	ret =  platform_driver_register(&hi3515_ahci_driver);
+	if(ret){
+		platform_device_unregister(&hi3515_ahci_device);
+		iounmap(hi_ahci_iomem);
+		return ret;
+	}
+
+	return ret;
 }
 
 static void __exit ahci_exit(void)
 {
-	pci_unregister_driver(&ahci_pci_driver);
-}
 
+	platform_driver_unregister(&hi3515_ahci_driver);
+	platform_device_unregister(&hi3515_ahci_device);
+	iounmap(hi_ahci_iomem);
+}
 
 MODULE_AUTHOR("Jeff Garzik");
 MODULE_DESCRIPTION("AHCI SATA low-level driver");
 MODULE_LICENSE("GPL");
-MODULE_DEVICE_TABLE(pci, ahci_pci_tbl);
+//MODULE_DEVICE_TABLE(pci, ahci_pci_tbl);
 MODULE_VERSION(DRV_VERSION);
 
 module_init(ahci_init);
diff -urNd linux-2.6.24/drivers/ata/Kconfig linux-2.6.24-hi3515/drivers/ata/Kconfig
--- linux-2.6.24/drivers/ata/Kconfig	2008-01-25 06:58:37.000000000 +0800
+++ linux-2.6.24-hi3515/drivers/ata/Kconfig	2010-03-16 10:41:10.000000000 +0800
@@ -42,7 +42,7 @@
 
 config SATA_AHCI
 	tristate "AHCI SATA support"
-	depends on PCI
+#	depends on PCI
 	help
 	  This option enables support for AHCI Serial ATA.
 
diff -urNd linux-2.6.24/drivers/ata/libata-core.c linux-2.6.24-hi3515/drivers/ata/libata-core.c
--- linux-2.6.24/drivers/ata/libata-core.c	2008-01-25 06:58:37.000000000 +0800
+++ linux-2.6.24-hi3515/drivers/ata/libata-core.c	2010-03-16 10:41:11.000000000 +0800
@@ -1934,6 +1934,7 @@
 
 	err_mask = ata_exec_internal(dev, &tf, NULL, DMA_FROM_DEVICE,
 				     id, sizeof(id[0]) * ATA_ID_WORDS, 0);
+	dma_cache_maint(id,sizeof(id[0]) * ATA_ID_WORDS,DMA_BIDIRECTIONAL);//2009.10.22 for cache consistency modify
 	if (err_mask) {
 		if (err_mask & AC_ERR_NODEV_HINT) {
 			DPRINTK("ata%u.%d: NODEV after polling detection\n",
diff -urNd linux-2.6.24/drivers/ata/libata-pmp.c linux-2.6.24-hi3515/drivers/ata/libata-pmp.c
--- linux-2.6.24/drivers/ata/libata-pmp.c	2008-01-25 06:58:37.000000000 +0800
+++ linux-2.6.24-hi3515/drivers/ata/libata-pmp.c	2010-03-16 10:41:12.000000000 +0800
@@ -100,7 +100,9 @@
 {
 	struct ata_link *link = qc->dev->link;
 	struct ata_port *ap = link->ap;
-
+	
+	/*hi_wj modified begin*/
+#if 0
 	if (ap->excl_link == NULL || ap->excl_link == link) {
 		if (ap->nr_active_links == 0 || ata_link_active(link)) {
 			qc->flags |= ATA_QCFLAG_CLEAR_EXCL;
@@ -109,7 +111,15 @@
 
 		ap->excl_link = link;
 	}
-
+#endif
+	if (ap->nr_active_links == 0 || ata_link_active(link)) {
+		qc->flags |= ATA_QCFLAG_CLEAR_EXCL;
+		return ata_std_qc_defer(qc);
+	}
+	/*hi_wj modified end*/
+	
+	ap->excl_link = link;
+	
 	return ATA_DEFER_PORT;
 }
 
