--- Mesa-7.9.2.orig/src/gallium/auxiliary/util/u_atomic.h	2011-09-30 23:50:46.987653495 +0800
+++ Mesa-7.9.2/src/gallium/auxiliary/util/u_atomic.h	2011-10-02 10:10:21.418998069 +0800
@@ -33,6 +33,8 @@
 #define PIPE_ATOMIC_ASM_GCC_X86_64
 #elif defined(PIPE_CC_GCC) && (PIPE_CC_GCC_VERSION >= 401)
 #define PIPE_ATOMIC_GCC_INTRINSIC
+#elif defined(PIPE_CC_GCC) && (PIPE_CC_GCC_VERSION >= 304)
+#define PIPE_ATOMIC_GCC_INTRINSIC_LEGENCY
 #else
 #error "Unsupported platform"
 #endif
@@ -177,6 +179,51 @@
 
 
 
+/* Implementation using legency GCC-provided synchronization intrinsics
+ */
+#if defined(PIPE_ATOMIC_GCC_INTRINSIC_LEGENCY)
+
+#define PIPE_ATOMIC "GCC Sync Intrinsics Lengency"
+
+#ifdef __cplusplus
+extern "C" {
+#endif
+
+#define p_atomic_set(_v, _i) (*(_v) = (_i))
+#define p_atomic_read(_v) (*(_v))
+
+static INLINE boolean
+p_atomic_dec_zero(int32_t *v)
+{
+   return (__sync_sub_and_fetch(v, 1) == 0);
+}
+
+static INLINE void
+p_atomic_inc(int32_t *v)
+{
+   (void) __sync_add_and_fetch(v, 1);
+}
+
+static INLINE void
+p_atomic_dec(int32_t *v)
+{
+   (void) __sync_sub_and_fetch(v, 1);
+}
+
+static INLINE int32_t
+p_atomic_cmpxchg(int32_t *v, int32_t old, int32_t _new)
+{
+   return __sync_val_compare_and_swap(v, old, _new);
+}
+
+#ifdef __cplusplus
+}
+#endif
+
+#endif
+
+
+
 /* Unlocked version for single threaded environments, such as some
  * windows kernel modules.
  */
